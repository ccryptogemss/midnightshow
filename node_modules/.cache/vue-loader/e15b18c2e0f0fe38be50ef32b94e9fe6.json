{"remainingRequest":"/Users/norbert.demeny/Projects/Personal/Crypto/midnightshow/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/norbert.demeny/Projects/Personal/Crypto/midnightshow/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/norbert.demeny/Projects/Personal/Crypto/midnightshow/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/norbert.demeny/Projects/Personal/Crypto/midnightshow/src/views/Home.vue?vue&type=template&id=fae5bece&","dependencies":[{"path":"/Users/norbert.demeny/Projects/Personal/Crypto/midnightshow/src/views/Home.vue","mtime":1630860662945},{"path":"/Users/norbert.demeny/Projects/Personal/Crypto/midnightshow/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/norbert.demeny/Projects/Personal/Crypto/midnightshow/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/norbert.demeny/Projects/Personal/Crypto/midnightshow/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/norbert.demeny/Projects/Personal/Crypto/midnightshow/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF92bS5fbSgwKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImhvbWUiIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJwcmVsb2FkZXItbWFzayIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicHJlbG9hZGVyIiB9KQogICAgICBdKSwKICAgICAgX2MoCiAgICAgICAgInNlY3Rpb24iLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVyby1zZWN0aW9uIGJnIGJnLWNvdmVyIHdpbmRvdy1oZWlnaHQgbGlnaHQtdGV4dCIsCiAgICAgICAgICBhdHRyczogeyBpZDogImhlcm8iIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJ1bCIsIHsgc3RhdGljQ2xhc3M6ICJzb2NpYWxzLW5hdiIgfSwgWwogICAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAic29jaWFscy1uYXYtaXRlbSIgfSwgWwogICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiIyIgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS10d2l0dGVyIiB9KQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAic29jaWFscy1uYXYtaXRlbSIgfSwgWwogICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiIyIgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1mYWNlYm9vayIgfSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogInNvY2lhbHMtbmF2LWl0ZW0iIH0sIFsKICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiMiIH0gfSwgWwogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZ2l0aHViIiB9KQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAic29jaWFscy1uYXYtaXRlbSIgfSwgWwogICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiIyIgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS12aW1lby1zcXVhcmUiIH0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJzb2NpYWxzLW5hdi1pdGVtIiB9LCBbCiAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWdvb2dsZS1wbHVzIiB9KQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAic29jaWFscy1uYXYtaXRlbSIgfSwgWwogICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiIyIgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1pbnN0YWdyYW0iIH0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGluZy1ibG9jayBjZW50ZXJlZC1ibG9jayBhbGlnbi1jZW50ZXIiIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvc3R5bGVzL2ltZy9tcy1uZXcucG5nIiksCiAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICIyNDBweCIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImg1IiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGluZy1hbHQiLAogICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJtYXJnaW4tYm90dG9tIjogIjhweCIgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJUaGUiKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygiaDEiLCB7IHN0YXRpY0NsYXNzOiAiZXh0cmEtaGVhZGluZyIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIk1pZG5pZ2h0IFNob3ciKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJ0bnMtY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJ0biBidG4tbWQiLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgaHJlZjogIiNhYm91dCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJkYXRhLW1vZGFsLWxpbmsiOiAiZW1haWwtdGlja2V0IgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgW192bS5fdigiQWJvdXQgVXMiKV0KICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuIGJ0bi1vdXRsaW5lIGJ0bi1tZCIsCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2NvbnRhY3QiLCAiZGF0YS1tb2RhbC1saW5rIjogIjAiIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkNvbnRhY3QiKV0KICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdCiAgICAgICAgICApCiAgICAgICAgXQogICAgICApLAogICAgICBfYygiaGVhZGVyIiwgeyBzdGF0aWNDbGFzczogImhlYWRlciBoZWFkZXItYmxhY2siIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImhlYWRlci13cmFwcGVyIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1zbS0yIGNvbC14cy0xMiBuYXZpZ2F0aW9uLWhlYWRlciIgfSwgWwogICAgICAgICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImxvZ28iLCBhdHRyczogeyBocmVmOiAiIyIgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9zdHlsZXMvaW1nL21zLW5ldy5wbmciKSwKICAgICAgICAgICAgICAgICAgICB3aWR0aDogIjgwIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibmF2YmFyLXRvZ2dsZSBjb2xsYXBzZWQiLAogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICJkYXRhLXRvZ2dsZSI6ICJjb2xsYXBzZSIsCiAgICAgICAgICAgICAgICAgICAgImRhdGEtdGFyZ2V0IjogIiNuYXZpZ2F0aW9uIiwKICAgICAgICAgICAgICAgICAgICAiYXJpYS1leHBhbmRlZCI6ICJmYWxzZSIsCiAgICAgICAgICAgICAgICAgICAgImFyaWEtY29udHJvbHMiOiAibmF2aWdhdGlvbiIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiaWNvbi1iYXIiIH0pLAogICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJpY29uLWJhciIgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogImljb24tYmFyIiB9KQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJjb2wtc20tMTAgY29sLXhzLTEyIG5hdmlnYXRpb24tY29udGFpbmVyIiB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibmF2YmFyLWNvbGxhcHNlIGNvbGxhcHNlIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogIm5hdmlnYXRpb24iIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgInVsIiwKICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJuYXZpZ2F0aW9uLWxpc3QgcHVsbC1sZWZ0IGxpZ2h0LXRleHQiIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJuYXZpZ2F0aW9uLWl0ZW0iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJuYXZpZ2F0aW9uLWxpbmsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2Fib3V0IiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiQWJvdXQiKV0KICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAibmF2aWdhdGlvbi1pdGVtIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibmF2aWdhdGlvbi1saW5rIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNzZXJ2aWNlcyIgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIlNlcnZpY2VzIildCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogIm5hdmlnYXRpb24taXRlbSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm5hdmlnYXRpb24tbGluayIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjdGVhbSIgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIlRlYW0iKV0KICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAibmF2aWdhdGlvbi1pdGVtIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibmF2aWdhdGlvbi1saW5rIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNwYXJ0bmVycyIgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIlBhcnRuZXJzIildCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogIm5hdmlnYXRpb24taXRlbSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm5hdmlnYXRpb24tbGluayIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjd2hpdGVwYXBlciIgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIldoaXRlcGFwZXIiKV0KICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAibmF2aWdhdGlvbi1pdGVtIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibmF2aWdhdGlvbi1saW5rIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNjb250YWN0cyIgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkNvbnRhY3RzIildCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHVsbC1yaWdodCBidXktYnRuIiwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly90Lm1lL1RoZU1pZG5pZ2h0U2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiSm9pbiBVcyIpXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoCiAgICAgICAgInNlY3Rpb24iLAogICAgICAgIHsgc3RhdGljQ2xhc3M6ICJzZWN0aW9uIGJnLWdyYXkgYWxpZ24tY2VudGVyIiwgYXR0cnM6IHsgaWQ6ICJhYm91dCIgfSB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgIF9jKCJoMyIsIFtfdm0uX3YoIlRoZSBNaWRuaWdodCBTaG93IildKSwKICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1hbHQiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIldoZXJlIHRoZSBjb21tdW5pdHkgc2FmZXR5IGlzIGluIHRoZSBmaXJzdCBwbGFjZSEiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRhYnMtd3JhcHBlciB0YWJzLWhvcml6b250YWwiIH0sIFsKICAgICAgICAgICAgICBfYygidWwiLCB7IHN0YXRpY0NsYXNzOiAibmF2IG5hdi10YWJzIiB9LCBbCiAgICAgICAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAiYWN0aXZlIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2hvcml6b250YWxfdGFiMSIsICJkYXRhLXRvZ2dsZSI6ICJ0YWIiIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJoNiIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkaW5nLWFsdCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1jb2RlIiB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJHZW5lcmFsIGluZm8iKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNob3Jpem9udGFsX3RhYjIiLCAiZGF0YS10b2dnbGUiOiAidGFiIiB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiaDYiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGluZy1hbHQiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtcm9ja2V0IiB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJWaXNpb24iKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNob3Jpem9udGFsX3RhYjMiLCAiZGF0YS10b2dnbGUiOiAidGFiIiB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiaDYiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGluZy1hbHQiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZXh0ZXJuYWwtbGluayIgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiUm9hZG1hcCIpCiAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRhYi1jb250ZW50IiB9LCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInRhYi1wYW5lIGZhZGUgYWN0aXZlIGluIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogImhvcml6b250YWxfdGFiMSIgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtc20tNSBpbWctY29sdW1uIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImltZy1yZXNwb25zaXZlIiwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvc3R5bGVzL2ltZy9tcy5qcGciKSwKICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogIjI0MCIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1zbS03IGFsaWduLWxlZnQiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJoNiIsIFtfdm0uX3YoIkFib3V0IGV2ZW50IildKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkZhdWNpYnVzIHNlZCBwcmV0aXVtLiBSaWRpY3VsdXMgIiksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJjb25zZWN0ZXR1ZXIiKV0pLAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgIiBldC4gSW4gYXJjdSBlbmltIHNpdCBpbiBsaWJlcm8gc2NlbGVyaXNxdWUgbWF1cmlzIHNlZC4gTnVsbGFtIGVsZWlmZW5kIGluIHZhcml1cyBhcmN1IHZpdGFlIGZldWdpYXQgbWFnbmEgaWQgdXQgbW9yYmkgY29uc2VjdGV0dWVyLiBJbiB2aXZhbXVzIGFyY3UuIElkIHV0IGR1aS4gU2VkIG1hc3NhIGluLiBTY2VsZXJpc3F1ZSBzdXNjaXBpdCBxdWlzcXVlIG1hZWNlbmFzIGFsaXF1ZXQgaW4uIFdpc2kgbWkgaXBzdW0uIEVsaXQgZXQgbWF1cmlzLiBEdWlzIGluIG1hZ25pIHByYWVzZW50ICIKICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sIFtfdm0uX3YoImNvbnRlbnQiKV0pLAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBtYXNzYS4iKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJDb25zZWN0ZXR1ZXIgYW1ldCB3aXNpIGZlbGlzIHNlbSAiKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoInRpbmNpZHVudCIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAiLiBVbHRyaWNpZXMgYmxhbmRpdCBpZCBldWlzbW9kIGluY2VwdG9zIG1hdXJpcyBwdWx2aW5hciBuZWMgbnVsbGFtIHF1aXNxdWUgY29uc2VxdWF0IG51bGxhIGVsZWlmZW5kIGVsZW1lbnR1bSB2aXZhbXVzIGFsaXF1YW0gcGxhY2VyYXQgbmVjLiBWZWhpY3VsYSBsZW8gcHJhZXNlbnQgdml0YWUgbGVvIG1hdXJpcyB1bGxhbWNvcnBlciBsZWN0dXMgc2VkIG1vbGxpcyBpZCB0dXJwaXMgZHVpIGNyYXMgc3VzcGVuZGlzc2UuIFBvcnRhIGRpYW0gIgogICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiMiIH0gfSwgW192bS5fdigiZWxlaWZlbmQiKV0pLAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgIi4gUHJhZXNlbnQgbWFnbmlzIHNpdC4gRW5pbSBsaWd1bGEgdmVsIGp1c3RvIHVybmEuIgogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigiTmlzbCBjcmFzIHZpdGFlIHdpc2kgb2RpbyBhbWV0LiIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkxhY3VzIGFtZXQgdmVzdGlidWx1bSBiZWxhcyIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlF1aXMgbnVuYyBjdXJhYml0dXIgYXNzdW1lbmRhIildKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0YWItcGFuZSBmYWRlIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogImhvcml6b250YWxfdGFiMiIgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtc20tNyBhbGlnbi1yaWdodCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImg2IiwgW192bS5fdigiV29ya3Nob3BzIildKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkZhdWNpYnVzIHNlZCBwcmV0aXVtLiBSaWRpY3VsdXMgIiksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJjb25zZWN0ZXR1ZXIiKV0pLAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgIiBldC4gSW4gYXJjdSBlbmltIHNpdCBpbiBsaWJlcm8gc2NlbGVyaXNxdWUgbWF1cmlzIHNlZC4gTnVsbGFtIGVsZWlmZW5kIGluIHZhcml1cyBhcmN1IHZpdGFlIGZldWdpYXQgbWFnbmEgaWQgdXQgbW9yYmkgY29uc2VjdGV0dWVyLiBJbiB2aXZhbXVzIGFyY3UuIElkIHV0IGR1aS4gU2VkIG1hc3NhIGluLiBTY2VsZXJpc3F1ZSBzdXNjaXBpdCBxdWlzcXVlIG1hZWNlbmFzIGFsaXF1ZXQgaW4uIFdpc2kgbWkgaXBzdW0uIEVsaXQgZXQgbWF1cmlzLiBEdWlzIGluIG1hZ25pIHByYWVzZW50ICIKICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sIFtfdm0uX3YoImNvbnRlbnQiKV0pLAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBtYXNzYS4iKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJDb25zZWN0ZXR1ZXIgYW1ldCB3aXNpIGZlbGlzIHNlbSAiKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoInRpbmNpZHVudCIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAiLiBVbHRyaWNpZXMgYmxhbmRpdCBpZCBldWlzbW9kIGluY2VwdG9zIG1hdXJpcyBwdWx2aW5hciBuZWMgbnVsbGFtIHF1aXNxdWUgY29uc2VxdWF0IG51bGxhIGVsZWlmZW5kIGVsZW1lbnR1bSB2aXZhbXVzIGFsaXF1YW0gcGxhY2VyYXQgbmVjLiBWZWhpY3VsYSBsZW8gcHJhZXNlbnQgdml0YWUgbGVvIG1hdXJpcyB1bGxhbWNvcnBlciBsZWN0dXMgc2VkIG1vbGxpcyBpZCB0dXJwaXMgZHVpIGNyYXMgc3VzcGVuZGlzc2UuIFBvcnRhIGRpYW0gIgogICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiMiIH0gfSwgW192bS5fdigiZWxlaWZlbmQiKV0pLAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgIi4gUHJhZXNlbnQgbWFnbmlzIHNpdC4gRW5pbSBsaWd1bGEgdmVsIGp1c3RvIHVybmEuIgogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigiTmlzbCBjcmFzIHZpdGFlIHdpc2kgb2RpbyBhbWV0LiIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkxhY3VzIGFtZXQgdmVzdGlidWx1bSBiZWxhcyIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlF1aXMgbnVuYyBjdXJhYml0dXIgYXNzdW1lbmRhIildKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1zbS01IGltZy1jb2x1bW4iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nLXJlc3BvbnNpdmUiLAogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9zdHlsZXMvaW1nL21zLmpwZyIpLAogICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAiMjQwIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInRhYi1wYW5lIGZhZGUiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiaG9yaXpvbnRhbF90YWIzIiB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1zbS01IGltZy1jb2x1bW4iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nLXJlc3BvbnNpdmUiLAogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9zdHlsZXMvaW1nL21zLmpwZyIpLAogICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAiMjQwIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLXNtLTcgYWxpZ24tbGVmdCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImg2IiwgW192bS5fdigiU3BvbnNvcnMgYXBwbHkiKV0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiRmF1Y2lidXMgc2VkIHByZXRpdW0uIFJpZGljdWx1cyAiKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoImNvbnNlY3RldHVlciIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAiIGV0LiBJbiBhcmN1IGVuaW0gc2l0IGluIGxpYmVybyBzY2VsZXJpc3F1ZSBtYXVyaXMgc2VkLiBOdWxsYW0gZWxlaWZlbmQgaW4gdmFyaXVzIGFyY3Ugdml0YWUgZmV1Z2lhdCBtYWduYSBpZCB1dCBtb3JiaSBjb25zZWN0ZXR1ZXIuIEluIHZpdmFtdXMgYXJjdS4gSWQgdXQgZHVpLiBTZWQgbWFzc2EgaW4uIFNjZWxlcmlzcXVlIHN1c2NpcGl0IHF1aXNxdWUgbWFlY2VuYXMgYWxpcXVldCBpbi4gV2lzaSBtaSBpcHN1bS4gRWxpdCBldCBtYXVyaXMuIER1aXMgaW4gbWFnbmkgcHJhZXNlbnQgIgogICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiMiIH0gfSwgW192bS5fdigiY29udGVudCIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIG1hc3NhLiIpCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigiTmlzbCBjcmFzIHZpdGFlIHdpc2kgb2RpbyBhbWV0LiIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkxhY3VzIGFtZXQgdmVzdGlidWx1bSBiZWxhcyIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlF1aXMgbnVuYyBjdXJhYml0dXIgYXNzdW1lbmRhIildKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXQogICAgICApLAogICAgICBfYygKICAgICAgICAic2VjdGlvbiIsCiAgICAgICAgeyBzdGF0aWNDbGFzczogInNlY3Rpb24gYWxpZ24tY2VudGVyIiwgYXR0cnM6IHsgaWQ6ICJzZXJ2aWNlcyIgfSB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaWNvbiBzZWN0aW9uLWljb24gaWNvbi1iYWRnZXMtdm90ZXMtMTQiCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiaDMiLCBbX3ZtLl92KCJTZXJ2aWNlcyIpXSksCiAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtYWx0IiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJDaG9vc2UgdGhlIHBhY2thZ2UgdGhhdCBmaXRzIHRoZSBiZXN0IGZvciB5b3UgYW5kIHlvdXIiKSwKICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJoaWdobGlnaHQiIH0sIFtfdm0uX3YoIiBwcm9qZWN0IildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLXNtLTQiIH0sIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgInBhY2thZ2UtY29sdW1uIGQtZmxleCBmbGV4LWNvbHVtbiBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbiIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInBhY2thZ2UtbG9nbyIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvc3R5bGVzL2ltZy9nb2xkLXN0YW1wLnBuZyIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICIyMDBweCIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicGFja2FnZS1kZXRhaWwiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZhIGZhLWNoZWNrIGNoZWNrLWljb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiVGVhbSB3YWxsZXQgdmVzdGVkIikKICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmYSBmYS1jaGVjayBjaGVjay1pY29uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlB1YmxpYyBQcmVzYWxlIChubyB3aGl0ZWxpc3QpIikKICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmYSBmYS1jaGVjayBjaGVjay1pY29uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlNhZmUgY29kZS4gTm8gYmFja2xpc3QgZnVuY3Rpb25zIikKICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmYSBmYS1jaGVjayBjaGVjay1pY29uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkRldiB0ZWFtIGhpc3RvcnkiKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJ0biBidG4tbGcgYnRuLW91dGxpbmUtY2xyIiwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiMiIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJTZWxlY3QiKV0KICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1zbS00IiB9LCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICJwYWNrYWdlLWNvbHVtbiBkLWZsZXggZmxleC1jb2x1bW4ganVzdGlmeS1jb250ZW50LWJldHdlZW4iCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJwYWNrYWdlLWxvZ28iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL3N0eWxlcy9pbWcvcGxhdGludW0tc3RhbXAucG5nIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogIjIwMHB4IgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJwYWNrYWdlLWRldGFpbCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmEgZmEtY2hlY2sgY2hlY2staWNvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJUZWFtIHdhbGxldCB2ZXN0ZWQiKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZhIGZhLWNoZWNrIGNoZWNrLWljb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiUHVibGljIFByZXNhbGUgKG5vIHdoaXRlbGlzdCkiKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZhIGZhLWNoZWNrIGNoZWNrLWljb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiU2FmZSBjb2RlIikKICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmYSBmYS1jaGVjayBjaGVjay1pY29uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIk5vIGJhY2tsaXN0IGZ1bmN0aW9ucyIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmEgZmEtY2hlY2sgY2hlY2staWNvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJEZXYgdGVhbSBmdWxseSBkb3h4ZWQgdG8gY29yZSB0ZWFtIikKICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidG4gYnRuLWxnIGJ0bi1vdXRsaW5lLWNsciIsCiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjIiB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiU2VsZWN0IildCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtc20tNCIgfSwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAicGFja2FnZS1jb2x1bW4gc3BlY2lhbC1jb2x1bW4gZC1mbGV4IGZsZXgtY29sdW1uIGp1c3RpZnktY29udGVudC1iZXR3ZWVuIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInNhbGUtbGFiZWwgdXBwZXJjYXNlIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiQmVzdCEiKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInBhY2thZ2UtbG9nbyIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvc3R5bGVzL2ltZy9kaWFtb25kLXN0YW1wLnBuZyIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICIyMDBweCIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicGFja2FnZS1kZXRhaWwiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZhIGZhLWNoZWNrIGNoZWNrLWljb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiVGVhbSB3YWxsZXQgdmVzdGVkIikKICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmYSBmYS1jaGVjayBjaGVjay1pY29uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlB1YmxpYyBQcmVzYWxlIChubyB3aGl0ZWxpc3QpIikKICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmYSBmYS1jaGVjayBjaGVjay1pY29uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlNhZmUgY29kZSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmEgZmEtY2hlY2sgY2hlY2staWNvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJObyBiYWNrbGlzdCBmdW5jdGlvbnMiKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZhIGZhLWNoZWNrIGNoZWNrLWljb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiRGV2IHRlYW0gZnVsbHkgZG94eGVkIHRvIGNvcmUgdGVhbSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmEgZmEtY2hlY2sgY2hlY2staWNvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJBbnRpIFJ1ZyBCU0MgLyBSdWcgcHJvb2YiKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZhIGZhLWNoZWNrIGNoZWNrLWljb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiTXVsdGkgc2lnIHdhbGxldCIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuIGJ0bi1sZyBidG4tb3V0bGluZS1jbHIiLAogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiIyIgfQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIlNlbGVjdCIpXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgInNlY3Rpb24iLAogICAgICAgIHsgc3RhdGljQ2xhc3M6ICJzZWN0aW9uIGJnLWdyYXkgYWxpZ24tY2VudGVyIiwgYXR0cnM6IHsgaWQ6ICJ0ZWFtIiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIiIH0sIFsKICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpY29uIHNlY3Rpb24taWNvbiBpY29uLWZhY2VzLXVzZXJzLTA0IgogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImgzIiwgW192bS5fdigiVGVhbSIpXSksCiAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtYWx0IiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJNZWV0IG91ciAiKSwKICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJoaWdobGlnaHQiIH0sIFtfdm0uX3YoImNvcmUgdGVhbSIpXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtc20tNCIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic3BlYWtlciIgfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJwaG90by13cmFwcGVyIHJvdW5kZWQiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImltZy1yZXNwb25zaXZlIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL3N0eWxlcy9pbWcvdGVhbS9taWRuaWdodC5qcGciKSwKICAgICAgICAgICAgICAgICAgICAgIGFsdDogIk1pZG5pZ2h0Q3J5cHRvIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImgzIiwgeyBzdGF0aWNDbGFzczogIm5hbWUiIH0sIFtfdm0uX3YoIk1pZG5pZ2h0IENyeXB0byIpXSksCiAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWFsdCIgfSwgWwogICAgICAgICAgICAgICAgICBfYygic21hbGwiLCBbX3ZtLl92KCJDRU8iKV0pCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImFib3V0IiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiTG9yZW0gSXBzdW0gaXMgc2ltcGx5IGR1bW15IHRleHQgb2YgdGhlIHByaW50aW5nIGFuZCB0eXBlc2V0dGluZyBpbmR1c3RyeS4gTG9yZW0gSXBzdW0gaGFzIGJlZW4gdGhlIGluZHVzdHJ5J3Mgc3RhbmRhcmQgZHVtbXkgdGV4dCBldmVyIHNpbmNlIHRoZSAxNTAwcy4iCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoInVsIiwgeyBzdGF0aWNDbGFzczogInNwZWFrZXItc29jaWFscyIgfSwgWwogICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZhY2Vib29rIiB9KQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLXR3aXR0ZXIiIH0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiMiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZ29vZ2xlLXBsdXMiIH0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLXNtLTQiIH0sIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInNwZWFrZXIiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicGhvdG8td3JhcHBlciByb3VuZGVkIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbWctcmVzcG9uc2l2ZSIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9zdHlsZXMvaW1nL3RlYW0vc2F2YWdlLmpwZyIpLAogICAgICAgICAgICAgICAgICAgICAgYWx0OiAiU2F2YWdlIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImgzIiwgeyBzdGF0aWNDbGFzczogIm5hbWUiIH0sIFtfdm0uX3YoIlNhdmFnZSIpXSksCiAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWFsdCIgfSwgWwogICAgICAgICAgICAgICAgICBfYygic21hbGwiLCBbX3ZtLl92KCJDT08iKV0pCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImFib3V0IiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiTG9yZW0gSXBzdW0gaXMgc2ltcGx5IGR1bW15IHRleHQgb2YgdGhlIHByaW50aW5nIGFuZCB0eXBlc2V0dGluZyBpbmR1c3RyeS4gTG9yZW0gSXBzdW0gaGFzIGJlZW4gdGhlIGluZHVzdHJ5J3Mgc3RhbmRhcmQgZHVtbXkgdGV4dCBldmVyIHNpbmNlIHRoZSAxNTAwcy4iCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoInVsIiwgeyBzdGF0aWNDbGFzczogInNwZWFrZXItc29jaWFscyIgfSwgWwogICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZhY2Vib29rIiB9KQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLXR3aXR0ZXIiIH0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiMiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZ29vZ2xlLXBsdXMiIH0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLXNtLTQiIH0sIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInNwZWFrZXIiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicGhvdG8td3JhcHBlciByb3VuZGVkIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbWctcmVzcG9uc2l2ZSIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9zdHlsZXMvaW1nL3RlYW0vY3J5cHRvLXdoYWxlLmpwZyIpLAogICAgICAgICAgICAgICAgICAgICAgYWx0OiAiQ3J5cHRvV2hhbGUiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygiaDMiLCB7IHN0YXRpY0NsYXNzOiAibmFtZSIgfSwgW192bS5fdigiQ3J5cHRvIFdoYWxlIildKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtYWx0IiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJzbWFsbCIsIFtfdm0uX3YoIkNGTyIpXSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiYWJvdXQiIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICJMb3JlbSBJcHN1bSBpcyBzaW1wbHkgZHVtbXkgdGV4dCBvZiB0aGUgcHJpbnRpbmcgYW5kIHR5cGVzZXR0aW5nIGluZHVzdHJ5LiBMb3JlbSBJcHN1bSBoYXMgYmVlbiB0aGUgaW5kdXN0cnkncyBzdGFuZGFyZCBkdW1teSB0ZXh0IGV2ZXIgc2luY2UgdGhlIDE1MDBzLiIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygidWwiLCB7IHN0YXRpY0NsYXNzOiAic3BlYWtlci1zb2NpYWxzIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiMiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZmFjZWJvb2siIH0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiMiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtdHdpdHRlciIgfSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiIyIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1nb29nbGUtcGx1cyIgfSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtc20tNCIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic3BlYWtlciIgfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJwaG90by13cmFwcGVyIHJvdW5kZWQiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImltZy1yZXNwb25zaXZlIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL3N0eWxlcy9pbWcvdGVhbS9qYW1pZS5qcGciKSwKICAgICAgICAgICAgICAgICAgICAgIGFsdDogIkphbWllIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImgzIiwgeyBzdGF0aWNDbGFzczogIm5hbWUiIH0sIFtfdm0uX3YoIkphbWllIildKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtYWx0IiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJzbWFsbCIsIFtfdm0uX3YoIkhlYWQgb2YgbWFya2V0aW5nIildKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJhYm91dCIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIkxvcmVtIElwc3VtIGlzIHNpbXBseSBkdW1teSB0ZXh0IG9mIHRoZSBwcmludGluZyBhbmQgdHlwZXNldHRpbmcgaW5kdXN0cnkuIExvcmVtIElwc3VtIGhhcyBiZWVuIHRoZSBpbmR1c3RyeSdzIHN0YW5kYXJkIGR1bW15IHRleHQgZXZlciBzaW5jZSB0aGUgMTUwMHMuIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJ1bCIsIHsgc3RhdGljQ2xhc3M6ICJzcGVha2VyLXNvY2lhbHMiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiIyIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1mYWNlYm9vayIgfSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiIyIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS10d2l0dGVyIiB9KQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWdvb2dsZS1wbHVzIiB9KQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1zbS00IiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzcGVha2VyIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInBob3RvLXdyYXBwZXIgcm91bmRlZCIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nLXJlc3BvbnNpdmUiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvc3R5bGVzL2ltZy90ZWFtL2h1Z28uanBnIiksCiAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICJIdWdvIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImgzIiwgeyBzdGF0aWNDbGFzczogIm5hbWUiIH0sIFtfdm0uX3YoIkh1Z28iKV0pLAogICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1hbHQiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoInNtYWxsIiwgW192bS5fdigiQ1RPIildKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJhYm91dCIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIkxvcmVtIElwc3VtIGlzIHNpbXBseSBkdW1teSB0ZXh0IG9mIHRoZSBwcmludGluZyBhbmQgdHlwZXNldHRpbmcgaW5kdXN0cnkuIExvcmVtIElwc3VtIGhhcyBiZWVuIHRoZSBpbmR1c3RyeSdzIHN0YW5kYXJkIGR1bW15IHRleHQgZXZlciBzaW5jZSB0aGUgMTUwMHMuIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJ1bCIsIHsgc3RhdGljQ2xhc3M6ICJzcGVha2VyLXNvY2lhbHMiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiIyIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1mYWNlYm9vayIgfSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiIyIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS10d2l0dGVyIiB9KQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWdvb2dsZS1wbHVzIiB9KQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1zbS00IiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzcGVha2VyIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInBob3RvLXdyYXBwZXIgcm91bmRlZCIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nLXJlc3BvbnNpdmUiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvc3R5bGVzL2ltZy90ZWFtL3NhdmFnZS1yLmpwZyIpLAogICAgICAgICAgICAgICAgICAgICAgYWx0OiAiSm9obiBEb2UiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygiaDMiLCB7IHN0YXRpY0NsYXNzOiAibmFtZSIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIlNhdmFnZSBSZWZpbmlzaGVyIikKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1hbHQiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoInNtYWxsIiwgW192bS5fdigiQ0lPIildKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJhYm91dCIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIkxvcmVtIElwc3VtIGlzIHNpbXBseSBkdW1teSB0ZXh0IG9mIHRoZSBwcmludGluZyBhbmQgdHlwZXNldHRpbmcgaW5kdXN0cnkuIExvcmVtIElwc3VtIGhhcyBiZWVuIHRoZSBpbmR1c3RyeSdzIHN0YW5kYXJkIGR1bW15IHRleHQgZXZlciBzaW5jZSB0aGUgMTUwMHMuIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJ1bCIsIHsgc3RhdGljQ2xhc3M6ICJzcGVha2VyLXNvY2lhbHMiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiIyIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1mYWNlYm9vayIgfSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiIyIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS10d2l0dGVyIiB9KQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWdvb2dsZS1wbHVzIiB9KQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgInNlY3Rpb24iLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAic2VjdGlvbiBhbGlnbi1jZW50ZXIiLAogICAgICAgICAgc3RhdGljU3R5bGU6IHsgInBhZGRpbmctdG9wIjogIjI1cHgiIH0sCiAgICAgICAgICBhdHRyczogeyBpZDogImZlZWRiYWNrIiB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICBfYygiaDUiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGluZy1hbHQiIH0sIFtfdm0uX3YoIlRFU1RJTU9OSUFMUyIpXSksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInRleHQtYWx0IiwKICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJtYXJnaW4tYm90dG9tIjogIjgwcHgiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF92bS5fdigid2hhdCBwcm9qZWN0cyAiKSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogImhpZ2hsaWdodCIgfSwgW192bS5fdigic2F5IildKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1zbS00IiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRlc3RpbW9uaWFsIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJhcnRpY2xlIiwgeyBzdGF0aWNDbGFzczogInRleHQtYm94IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJUaGUgTWlkbmlnaHQgQ29yZSB0ZWFtIGlzIHRoZSBiZXN0IHRvIHdvcmsgd2l0aCIpCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImF1dGhvci1ibG9jayIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJzdHJvbmciLCB7IHN0YXRpY0NsYXNzOiAibmFtZSIgfSwgW192bS5fdigiSm9obiBEb2UiKV0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJzbWFsbCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWFsdCBjb21wYW55IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkF0b21pYyBUb2tlbiIpCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtc20tNCIgfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXN0aW1vbmlhbCIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiYXJ0aWNsZSIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWJveCIgfSwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICJUaGUgTWlkbmlnaHQgU2hvdyBpcyB0aGUgYmVzdCBncm91cCBpbiB0aGUgYnNjIHNwYWNlISIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImF1dGhvci1ibG9jayIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJzdHJvbmciLCB7IHN0YXRpY0NsYXNzOiAibmFtZSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJNaWNoYWVsIFNjaGVyenppbmdlciIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoInNtYWxsIiwgeyBzdGF0aWNDbGFzczogInRleHQtYWx0IGNvbXBhbnkiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiRHV4RG9nZSIpCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtc20tNCIgfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXN0aW1vbmlhbCIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiYXJ0aWNsZSIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWJveCIgfSwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICJJIHdvdWxkIGFsd2F5cyByZWFjaCBvdXQgdG8gdGhlbSBhZ2FpbiEgVGhleSBhcmUgdGhlIGJlc3QhIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiYXV0aG9yLWJsb2NrIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIHsgc3RhdGljQ2xhc3M6ICJuYW1lIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIk1pa2UgTWV5ZXJzIikKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygic21hbGwiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1hbHQgY29tcGFueSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJQZW9wbGVzRG9nZSIpCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXQogICAgICApLAogICAgICBfYygKICAgICAgICAic2VjdGlvbiIsCiAgICAgICAgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJzZWN0aW9uIGJnLWdyYXkgYWxpZ24tY2VudGVyIiwKICAgICAgICAgIGF0dHJzOiB7IGlkOiAicGFydG5lcnMiIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaWNvbiBzZWN0aW9uLWljb24gaWNvbi1kb2N1bWVudHMtYm9va21hcmtzLTEyIgogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImgzIiwgW192bS5fdigiUGFydG5lcnMiKV0pLAogICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWFsdCIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiZ3JvdXBzIHRoYXQgIiksCiAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiaGlnaGxpZ2h0IiB9LCBbX3ZtLl92KCJzaGFyZXMiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIHRoZSBzYW1lIHZhbHVlIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzcG9uc29ycyIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic3BvbnNvciBiaWciIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL3N0eWxlcy9pbWcvdGVhbS9hbnRpcnVnLmpwZyIpLAogICAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdCiAgICAgICksCiAgICAgIF9jKAogICAgICAgICJzZWN0aW9uIiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInNlY3Rpb24gYmcgYmctY292ZXIgYmcgbGlnaHQtdGV4dCBhbGlnbi1jZW50ZXIiLAogICAgICAgICAgYXR0cnM6IHsgaWQ6ICJyZWdpc3RlciIgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIiB9LCBbCiAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nLXJlc3BvbnNpdmUiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL3N0eWxlcy9pbWcvbXMtbmV3LnBuZyIpLAogICAgICAgICAgICAgICAgICBhbHQ6ICJDcnlwdG9XaGFsZSIsCiAgICAgICAgICAgICAgICAgIHdpZHRoOiAiMTIwIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiaDIiLCBbX3ZtLl92KCJKb2luIG91ciBmYW1pbHkgbm93ISIpXSksCiAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJFdmVyeW9uZSBpcyB3ZWxjb21lZCB0byBiZSBwYXJ0IG9mIG91ciBmYW1pbHkuIExldCdzIGNoYW5nZSB0aGUgYnNjIHNwYWNlIHRvZ2V0aGVyISIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJ0biBidG4tbGcgYnRuLW91dGxpbmUiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vdC5tZS9UaGVNaWRuaWdodFNob3ciLAogICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJCZWNvbWUgYSBtZW1iZXIiKV0KICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdCiAgICAgICksCiAgICAgIF9jKCJzZWN0aW9uIiwgeyBzdGF0aWNDbGFzczogImZvb3RlciIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZC00IiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAid2lkZ2V0IGFib3V0LXdpZGdldCIgfSwgWwogICAgICAgICAgICAgIF9jKCJoNiIsIHsgc3RhdGljQ2xhc3M6ICJ3aWRnZXQtaGVhZCIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJBYm91dCAiKSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogImhpZ2hsaWdodCIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIk1pZG5pZ2h0IFNob3ciKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWFsdCIgfSwgWwogICAgICAgICAgICAgICAgX2MoInNtYWxsIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIkxvcmVtIElwc3VtIGlzIHNpbXBseSBkdW1teSB0ZXh0IG9mIHRoZSBwcmludGluZyBhbmQgdHlwZXNldHRpbmcgaW5kdXN0cnkuIExvcmVtIElwc3VtIGhhcyBiZWVuIHRoZSBpbmR1c3RyeSdzIHN0YW5kYXJkIGR1bW15IHRleHQgZXZlciBzaW5jZSB0aGUgMTUwMHMsIHdoZW4gYW4gdW5rbm93biBwcmludGVyIHRvb2sgYSBnYWxsZXkgb2YgdHlwZSBhbmQgc2NyYW1ibGVkIGl0IHRvIG1ha2UgYSB0eXBlLiIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbWctcmVzcG9uc2l2ZSIsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvc3R5bGVzL2ltZy90ZWFtL21pZG5pZ2h0LWxvZ28uanBnIiksCiAgICAgICAgICAgICAgICAgIGFsdDogIkNyeXB0b1doYWxlIiwKICAgICAgICAgICAgICAgICAgd2lkdGg6ICIxMjAiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtNCBjb2wtbGctMyBjb2wtbGctb2Zmc2V0LTEiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ3aWRnZXQgdHdpdHRlci13aWRnZXQiIH0sIFsKICAgICAgICAgICAgICBfYygiaDMiLCBbX3ZtLl92KCJMb2NhdGlvbiIpXSksCiAgICAgICAgICAgICAgX2MoInVsIiwgeyBzdGF0aWNDbGFzczogImxpc3QgYWxpZ24tbGVmdCIgfSwgWwogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1tYXAtbWFya2VyIiB9KSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCI4ODEgN3RoIEF2ZSBOZXcgWW9yaywgTlkiKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWVudmVsb3BlIiB9KSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJpbmZvQHZlbnRjYW1wLmNvbSIpCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtcGhvbmUiIH0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIig1MTgpIDQ1Ny01MTgxIDEwMDAxIikKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1jbG9jay1vIiB9KSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCI3OjMwIC0gMjI6MDAiKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZC00IGNvbC1sZy0zIGNvbC1sZy1vZmZzZXQtMSIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIndpZGdldCBpbnN0YWdyYW0td2lkZ2V0IiB9LCBbCiAgICAgICAgICAgICAgX2MoImg2IiwgeyBzdGF0aWNDbGFzczogIndpZGdldC1oZWFkIiB9LCBbCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1pbnN0YWdyYW0iIH0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCJUZWFtIikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygidWwiLCB7IHN0YXRpY0NsYXNzOiAiaW5zdGFncmFtLWxpc3QiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL3N0eWxlcy9pbWcvdGVhbS9taWRuaWdodC5qcGciKSwKICAgICAgICAgICAgICAgICAgICAgIGFsdDogInBob3RvIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvc3R5bGVzL2ltZy90ZWFtL3NhdmFnZS5qcGciKSwKICAgICAgICAgICAgICAgICAgICAgIGFsdDogInBob3RvIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvc3R5bGVzL2ltZy90ZWFtL2NyeXB0by13aGFsZS5qcGciKSwKICAgICAgICAgICAgICAgICAgICAgIGFsdDogInBob3RvIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvc3R5bGVzL2ltZy90ZWFtL2phbWllLmpwZyIpLAogICAgICAgICAgICAgICAgICAgICAgYWx0OiAicGhvdG8iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9zdHlsZXMvaW1nL3RlYW0vaHVnby5qcGciKSwKICAgICAgICAgICAgICAgICAgICAgIGFsdDogInBob3RvIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvc3R5bGVzL2ltZy90ZWFtL3NhdmFnZS1yLmpwZyIpLAogICAgICAgICAgICAgICAgICAgICAgYWx0OiAicGhvdG8iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvb3Rlci1iYXNlIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZC02IiB9LCBbCiAgICAgICAgICAgICAgX2MoInVsIiwgeyBzdGF0aWNDbGFzczogImZvb3Rlci1uYXYiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJmb290ZXItbmF2LWl0ZW0iIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sIFtfdm0uX3YoIkNvbnRhY3QiKV0pCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJmb290ZXItbmF2LWl0ZW0iIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sIFtfdm0uX3YoIlByaXZhY3kgcG9saWN5IildKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtNiBhbGlnbi1yaWdodCIgfSwgWwogICAgICAgICAgICAgIF9jKCJ1bCIsIHsgc3RhdGljQ2xhc3M6ICJzb2NpYWxzLW5hdiBhbGlnbi1yaWdodCIgfSwgWwogICAgICAgICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogInNvY2lhbHMtbmF2LWl0ZW0iIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS10d2l0dGVyIiB9KQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAic29jaWFscy1uYXYtaXRlbSIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiMiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWZhY2Vib29rIiB9KQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAic29jaWFscy1uYXYtaXRlbSIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiMiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWdpdGh1YiIgfSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogInNvY2lhbHMtbmF2LWl0ZW0iIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS12aW1lby1zcXVhcmUiIH0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJzb2NpYWxzLW5hdi1pdGVtIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiIyIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZ29vZ2xlLXBsdXMiIH0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJzb2NpYWxzLW5hdi1pdGVtIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiIyIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtaW5zdGFncmFtIiB9KQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWFsdCIgfSwgWwogICAgICAgICAgICAgICAgX2MoInNtYWxsIiwgW192bS5fdigiQWxswqBSaWdodHMgUmVzZXJ2ZWQgwqnCoDIwMjEiKV0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfQpdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}